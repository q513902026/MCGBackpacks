Index: src/main/java/me/renner6895/backpacks/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package me.renner6895.backpacks;\r\n\r\nimport me.hope.core.PluginCommandMap;\r\nimport me.hope.core.inject.Injector;\r\nimport me.hope.core.inject.InjectorBuilder;\r\nimport me.renner6895.backpacks.commands.*;\r\nimport me.renner6895.backpacks.events.CraftingEvents;\r\nimport me.renner6895.backpacks.events.InventoryEvents;\r\nimport me.renner6895.backpacks.events.JoinLeaveEvents;\r\nimport me.renner6895.backpacks.objects.Backpack;\r\nimport me.renner6895.backpacks.objects.PluginPlayer;\r\nimport me.renner6895.backpacks.objects.SlotFiller;\r\nimport me.renner6895.nmstag.NMSUtil;\r\nimport me.renner6895.nmstag.NMSUtil_1_12;\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.entity.Player;\r\nimport org.bukkit.inventory.ItemStack;\r\nimport org.bukkit.plugin.PluginManager;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.UUID;\r\nimport java.util.logging.Logger;\r\n\r\n/**\r\n * @author HopeAsd\r\n * @author xiaoyv_404\r\n */\r\npublic class Main extends JavaPlugin {\r\n    /**\r\n     * 日志文件实例\r\n     */\r\n    public static Logger log;\r\n\r\n    /**\r\n     * 实例注入\r\n     */\r\n    private static Injector injector;\r\n    /**\r\n     *\r\n     */\r\n    private BackPackCache backPackCache;\r\n    /**\r\n     * 管理命令的注册\r\n     */\r\n    private static PluginCommandMap<Main> adminCommand;\r\n\r\n    private NMSUtil nmsUtil;\r\n    private Map<String, PluginPlayer> playerMap;\r\n    public static SlotFiller slotFiller;\r\n    public static String defaultName;\r\n    public static int defaultSlots;\r\n    public static int defaultItemId;\r\n    public static short defaultItemData;\r\n\r\n    public Main() {\r\n    }\r\n\r\n    @Override\r\n    public void onLoad() {\r\n        registerBeans();\r\n    }\r\n\r\n    public void onDisable() {\r\n        log.info(\"Save Backpacks......\");\r\n        long lastTime = System.currentTimeMillis();\r\n        int length = 0;\r\n        for (final Backpack backpack : backPackCache.getBackpackMap().values()) {\r\n            if (backpack.isInit() && backpack.hasViewer()) {\r\n                backpack.clearViewers();\r\n                backpack.saveBackpack();\r\n                length += 1;\r\n            }\r\n        }\r\n        log.info(\"Saving Backpacks Size: \" + length);\r\n        log.info(\"Saving Backpacks Time-Consuming: \" + (System.currentTimeMillis() - lastTime) + \" ms\");\r\n        for (final PluginPlayer pluginPlayer : this.playerMap.values()) {\r\n            pluginPlayer.removal();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        if (!this.registerUtils()) {\r\n            log.info(\"You must use the last release of the Minecraft version you are using.\");\r\n            Bukkit.getPluginManager().disablePlugin(this);\r\n            return;\r\n        }\r\n        if (!me.hope.VersionCheck.checkCoreVersion(1, 0, 6)) {\r\n            log.info(\"依赖的HopeCore版本不符合,关闭中\");\r\n            Bukkit.getPluginManager().disablePlugin(this);\r\n            return;\r\n        }\r\n        injector.injectClasses();\r\n        this.registerFiles();\r\n        this.registerConfig();\r\n        this.registerEvents();\r\n        registerCommands();\r\n        long lastTime = System.currentTimeMillis();\r\n        this.registerBackpacks();\r\n        log.info(\"Register Backpacks Time-Consuming: \" + (System.currentTimeMillis() - lastTime) + \" ms\");\r\n        this.registerPlayers();\r\n\r\n    }\r\n\r\n    private boolean registerUtils() {\r\n        String version;\r\n        try {\r\n            version = Bukkit.getServer().getClass().getPackage().getName().split(\"\\\\.\")[3];\r\n        } catch (ArrayIndexOutOfBoundsException var3) {\r\n            return false;\r\n        }\r\n        if (\"v1_12_R1\".equals(version)) {\r\n            this.nmsUtil = new NMSUtil_1_12();\r\n        }\r\n        return this.nmsUtil != null;\r\n    }\r\n\r\n    private void registerPlayers() {\r\n        log.info(\"Update PluginPlayers...\");\r\n        this.playerMap = new HashMap<>();\r\n        for (final Player player : Bukkit.getOnlinePlayers()) {\r\n            try {\r\n                this.registerPlayer(new PluginPlayer(player));\r\n            } catch (NullPointerException e) {\r\n                log.warning(\"注册玩家; \" + player.getName() + \"时出错\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void registerBackpacks() {\r\n        log.info(\"Update Backpacks...\");\r\n        Main.slotFiller = new SlotFiller();\r\n        Main.slotFiller.refresh();\r\n        Main.defaultName = this.getConfig().getString(\"default-backpack.name\");\r\n        Main.defaultSlots = this.getConfig().getInt(\"default-backpack.slots\");\r\n        Main.defaultItemId = this.getConfig().getInt(\"default-backpack.item-id\");\r\n        Main.defaultItemData = (byte) this.getConfig().getInt(\"default-backpack.item-data\");\r\n\r\n        backPackCache.linkYamlFileToMap();\r\n        log.info(\"Backpack Size: \" + backPackCache.getBackpackMap().size());\r\n    }\r\n\r\n    private void registerFiles() {\r\n        final File backpacksFolder = new File(this.getDataFolder() + File.separator + \"backpacks\");\r\n        if (!backpacksFolder.exists()) {\r\n            log.info(\"Generating backpacks folder...\");\r\n            backpacksFolder.mkdirs();\r\n        }\r\n    }\r\n    private void registerConfig() {\r\n        if (this.getConfig().get(\"restore-defaults\") == null || this.getConfig().getBoolean(\"restore-defaults\")) {\r\n            this.getConfig().set(\"restore-defaults\", false);\r\n            this.getConfig().set(\"config-version\", 1);\r\n            this.getConfig().set(\"prefix\", \"&3&l[&bMystical&7Backpacks&3&l]\");\r\n            this.getConfig().set(\"default-backpack.item-id\", 130);\r\n            this.getConfig().set(\"default-backpack.item-data\", 0);\r\n            this.getConfig().set(\"default-backpack.name\", \"&5Mystical &8Backpack\");\r\n            this.getConfig().set(\"default-backpack.slots\", 27);\r\n            this.getConfig().set(\"slot-filler.item-id\", 160);\r\n            this.getConfig().set(\"slot-filler.item-data\", 15);\r\n            this.getConfig().set(\"slot-filler.name\", \"&cNo Access\");\r\n            this.registerLang();\r\n        }\r\n        this.saveConfig();\r\n    }\r\n\r\n    private void registerLang() {\r\n        this.getConfig().set(\"give.error\", \"&cError: For information on how to use this command, type /backpacks help give\");\r\n        this.getConfig().set(\"give.error2\", \"&7The player %s is not online\");\r\n        this.getConfig().set(\"give.succuse\", \"&7New Backpack given to %s .\");\r\n        this.getConfig().set(\"clone.error\", \"&cYou can only use this command as a player!\");\r\n        this.getConfig().set(\"clone.succuse\", \"&7The backpack item has been cloned!\");\r\n        this.getConfig().set(\"clone.error2\", \"&cYou must be holding a backpack for this to work!\");\r\n        this.getConfig().set(\"rename.error\", \"&cError: You must be a player to use this command.\");\r\n        this.getConfig().set(\"rename.error2\", \"&cError: For information on how to use this command, type /backpacks help rename\");\r\n        this.getConfig().set(\"rename.error3\", \"&cError: You must be holding the backpack in your hand to rename it.\");\r\n        this.getConfig().set(\"rename.succuse\", \"&7Backpack renamed to %s &7.\");\r\n        this.getConfig().set(\"delete.error\", \"&cYou can only use this command as a player!\");\r\n        this.getConfig().set(\"delete.succuse\", \"&7The backpack has been delete!\");\r\n        this.getConfig().set(\"delete.error\", \"&cYou can only use this command as a player!\");\r\n    }\r\n\r\n    private void registerEvents() {\r\n        final PluginManager pm = Bukkit.getPluginManager();\r\n        pm.registerEvents(new InventoryEvents(), this);\r\n        pm.registerEvents(new JoinLeaveEvents(), this);\r\n        pm.registerEvents(new CraftingEvents(), this);\r\n    }\r\n\r\n    /**\r\n     * 注册命令\r\n     */\r\n    private void registerCommands() {\r\n        adminCommand.registerCommand(\"create\", injector.getSingleton(CreateCommand.class));\r\n        adminCommand.registerCommand(\"give\", injector.getSingleton(GiveCommand.class));\r\n        adminCommand.registerCommand(\"clone\", injector.getSingleton(CloneCommand.class));\r\n        adminCommand.registerCommand(\"rename\", injector.getSingleton(RenameCommand.class));\r\n        adminCommand.registerCommand(\"delete\", injector.getSingleton(DeleteCommand.class));\r\n        adminCommand.registerCommand(\"reslot\", injector.getSingleton(ReslotCommand.class));\r\n        adminCommand.registerCommand(\"find\", injector.getSingleton(FindCommand.class));\r\n        adminCommand.registerCommand(\"view\", injector.getSingleton(ViewCommand.class));\r\n        adminCommand.registerCommand(\"rebuildCache\", injector.getSingleton(RebuildCacheCommand.class));\r\n        adminCommand.registerCommand(\"viewall\", injector.getSingleton(ViewAllCommand.class));\r\n        adminCommand.registerCommand(\"help\", injector.getSingleton(HelpCommand.class));\r\n\r\n        this.getCommand(\"backpacks\").setExecutor(adminCommand::onCommand);\r\n    }\r\n\r\n    public boolean itemIsBackpack(final ItemStack item) {\r\n        if (item != null && this.nmsUtil.getTag(item) != null && this.nmsUtil.hasKey(item, \"backpack-item\")) {\r\n            final String backpackId = this.nmsUtil.getStringTag(item, \"backpack-item\");\r\n            final File file = new File(this.getDataFolder() + File.separator + \"backpacks\", backpackId + \".yml\");\r\n            if (file.exists()) {\r\n                return true;\r\n            }\r\n            if (backpackId != null) {\r\n                item.setAmount(0);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public Backpack getBackpack(final UUID uuid) {\r\n        Backpack bp = backPackCache.getBackpackMap().get(uuid);\r\n        if (!bp.isInit()) {\r\n            bp.load();\r\n        }\r\n        return bp;\r\n    }\r\n\r\n    private File getBackpackFileByUUID(UUID uuid) {\r\n        return new File(this.getDataFolder() + File.separator + \"backpacks\", uuid + \".yml\");\r\n    }\r\n\r\n    public void registerBackpack(final Backpack backpack) {\r\n        backPackCache.getBackpackMap().put(backpack.getUniqueId(), backpack);\r\n    }\r\n\r\n    public void unregisterBackpack(final Backpack backpack) {\r\n        backPackCache.getBackpackMap().remove(backpack.getUniqueId());\r\n    }\r\n\r\n    public PluginPlayer getPluginPlayer(final String id) {\r\n        return this.playerMap.get(id);\r\n    }\r\n\r\n    private void linkPlayerToBackpack(final PluginPlayer pluginPlayer) {\r\n        final String name = pluginPlayer.getPlayer().getName();\r\n        for (final Map.Entry<UUID, Backpack> entry : backPackCache.getBackpackMap().entrySet()) {\r\n            if (entry.getValue().getBackpackForName(name) != null) {\r\n                pluginPlayer.addBackpack(entry.getValue());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void registerPlayer(final PluginPlayer pluginPlayer) {\r\n        this.linkPlayerToBackpack(pluginPlayer);\r\n        this.playerMap.put(pluginPlayer.getPlayer().getName(), pluginPlayer);\r\n    }\r\n\r\n    public void unregisterPlayer(final PluginPlayer pluginPlayer) {\r\n        this.playerMap.remove(pluginPlayer.getPlayer().getName());\r\n    }\r\n\r\n    public String getPrefix() {\r\n        final String prefix = this.getConfig().getString(\"prefix\");\r\n        return (prefix != null && prefix.length() >= 1) ? (prefix + \" \") : \"\";\r\n    }\r\n\r\n    public NMSUtil getNmsUtil() {\r\n        return this.nmsUtil;\r\n    }\r\n\r\n    private void registerBeans() {\r\n        injector = new InjectorBuilder().setPlugin(this).setDefaultPath(\"me.renner6895.backpacks\").build();\r\n\r\n        injector.register(Main.class,this);\r\n        log = injector.register(Logger.class, this.getLogger());\r\n\r\n        adminCommand = injector.register(PluginCommandMap.class, new PluginCommandMap(this));\r\n\r\n        backPackCache = injector.register(BackPackCache.class,new BackPackCache());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/me/renner6895/backpacks/Main.java b/src/main/java/me/renner6895/backpacks/Main.java
--- a/src/main/java/me/renner6895/backpacks/Main.java	
+++ b/src/main/java/me/renner6895/backpacks/Main.java	
@@ -205,6 +205,7 @@
         adminCommand.registerCommand("rebuildCache", injector.getSingleton(RebuildCacheCommand.class));
         adminCommand.registerCommand("viewall", injector.getSingleton(ViewAllCommand.class));
         adminCommand.registerCommand("help", injector.getSingleton(HelpCommand.class));
+        adminCommand.registerCommand("rebind",injector.getSingleton(RebindCommand.class));
 
         this.getCommand("backpacks").setExecutor(adminCommand::onCommand);
     }
